/* * Developed  by Kiran Yedavalli on 8/9/18 8:20 AM * Last Modified 8/8/18 10:44 PM * Copyright (c) 2018. All rights reserved. */package com.farms;import akka.actor.ActorSystem;import com.farms.models.infra.FarmException;import com.farms.serviceprovider.PurchaseRestServiceProvider;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.IOException;import java.io.InputStream;import java.util.Optional;import java.util.Properties;public class Farm {    private static volatile Farm farm =null;    private final Logger logger = LoggerFactory.getLogger(Farm.class);    private final String propertiesFile = "farm.properties";    private FarmRestServer farmRestServer;    private Farm(){}    private Properties getProperties(){        Properties p = new Properties();        InputStream input = null;        try{            input = this.getClass().getClassLoader().getResourceAsStream(propertiesFile);            p.load(input);        }        catch(IOException e){            logger.error("Unable to read {}", propertiesFile);            throw new FarmException("Unable to read " + propertiesFile);        }        finally{            if(input != null){                try{                    input.close();                }                catch(IOException e){                    logger.error("Unable to close {}", propertiesFile);                    throw new FarmException("Unable to close " + propertiesFile);                }            }        }        return p;    }    public void initialize(){        ActorSystem system = ActorSystem.create("farm");        Properties props = getProperties();        String host = props.getProperty("host");        int port = Integer.parseInt(props.getProperty("port"));        boolean https = Boolean.valueOf(props.getProperty("https"));        farmRestServer = new FarmRestServer(system, host, port, https);    }    public static Farm getInstance(){        if(farm == null){            synchronized (Farm.class){                if(farm ==null)                    farm = new Farm();            }        }        return farm;    }    public FarmRestServer getFarmRestServer() {        return farmRestServer;    }    public static void main(String[] args) {        Farm.getInstance().initialize();        Farm.getInstance().getFarmRestServer().addRestServiceProvider(Optional.of(new PurchaseRestServiceProvider()));    }}